1) Create dynamodb table
console-> dynamodb
create table
     tablename
     partition key
click create table.


2)Create lambda function
need to create IAM
    Open IAM
    click roles create roles
    Choose Trusted Entity: AWS Service
    Use case: Lambda
    Click Next.
    Attach permissions:
    Search and add: AWSLambdaBasicExecutionRole
    Search and add: AmazonDynamoDBFullAccess
    Click Next, name the role: LambdaDynamoDBRole
    Click Create Role

then lambda function
    Go to AWS Console → Open Lambda
    Click Create function
    Choose:
    Function name: SubmitFeedbackFunction
    Runtime: Node.js 18.x (or latest stable)
    Execution Role: Use existing role → choose LambdaDynamoDBRole
    click create function.

    Need to add lambda code (node or python yourwish as per your Runtime)

    import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
    import { DynamoDBDocumentClient, PutCommand } from "@aws-sdk/lib-dynamodb";

    const client = new DynamoDBClient({});
    const dynamo = DynamoDBDocumentClient.from(client);

    export const handler = async (event) => {
    const body = JSON.parse(event.body);

    const params = {
        TableName: "FeedbackTable",
        Item: {
        rollno: body.rollno,
        name: body.name,
        subject: body.subject,
        rating: body.rating,
        },
    };

    try {
        await dynamo.send(new PutCommand(params));
        return {
        statusCode: 200,
        headers: {
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Headers": "Content-Type",
            "Access-Control-Allow-Methods": "OPTIONS,POST",
        },
        body: JSON.stringify({ message: "Success" }),
        };
    } catch (err) {
        console.error("DynamoDB insert error", err);
        return {
        statusCode: 500,
        body: JSON.stringify({ error: "Could not write to DynamoDB" }),
        };
    }
    };

Dont forget to click deploy after pasting code.


3) Create API GATEWAY
    Go to AWS Console → Search and open API Gateway
    Choose HTTP API → Build
    Configure:
    Name your API: FeedbackAPI
    Integration type: Lambda Function
    Choose region and select your function SubmitFeedbackFunction
    Setup route:
    Method: POST
    Resource path: /feedback (you can choose any path, but /feedback is relevant)
    Add a stage name like prod or v1
    Click Create


    Enable CORS (Important)
    In your API → Go to CORS settings
    Ensure:
    Access-Control-Allow-Origin: *
    Access-Control-Allow-Methods: POST
    Access-Control-Allow-Headers: content-type
    Save settings if changed

    IMPORTANT--Get the api link to paste in react code-->You can find it at left panel in stage or stages
    search for it and then proceed.

4) Create React App

import React, { useState } from "react";
import axios from "axios";

const App = () => {
  const [form, setForm] = useState({
    rollno: "",
    name: "",
    subject: "Math",
    rating: "",
  });

  const submitFeedback = async () => {
    try {
      await axios.post("https://jthszps244.execute-api.us-east-1.amazonaws.com/prod/feedback", form);
      alert("Submitted!");
    } catch (err) {
      alert("Submission failed");
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center p-4">
      <div className="bg-white p-6 rounded-2xl shadow-xl w-full max-w-md">
        <h2 className="text-2xl font-semibold mb-6 text-center text-gray-800">
          Feedback Form
        </h2>

        <div className="space-y-4">
          <input
            className="w-full px-4 py-2 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Roll No"
            value={form.rollno}
            onChange={(e) => setForm({ ...form, rollno: e.target.value })}
          />

          <input
            className="w-full px-4 py-2 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Name"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
          />

          <select
            className="w-full px-4 py-2 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
            value={form.subject}
            onChange={(e) => setForm({ ...form, subject: e.target.value })}
          >
            <option value="Math">Cloud Computing</option>
            <option value="Science">Neural Networks</option>
            <option value="History">Internet Of Things</option>
            <option value="History">Competitive Programming</option>
          </select>

          <input
            className="w-full px-4 py-2 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Rating (1-5)"
            type="number"
            min="1"
            max="5"
            value={form.rating}
            onChange={(e) => setForm({ ...form, rating: e.target.value })}
          />

          <button
            onClick={submitFeedback}
            className="w-full bg-blue-600 text-white py-2 rounded-xl hover:bg-blue-700 transition duration-300"
          >
            Submit
          </button>
        </div>
      </div>
    </div>
  );
};

export default App;


Build the React App: npm run build


5) Host react app on S3 bucket

  Go to AWS Console → Open S3
  Click Create Bucket
  Name: feedback-app-rollno
  Uncheck “Block all public access” (to allow CloudFront access)
  After bucket is created:
  Go to Properties → Static website hosting
  Enable it and set:
  Index document: index.html
  Error document: index.html
  Upload the entire build/ folder contents
  Make objects public, by using bucket policy like:

  {
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "PublicReadGetObject",
      "Effect": "Allow",
      "Principal": "*",
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::feedback-app-22bd1a056t/*"(replace with you arn)
    }
  ]
}




Step 6: Create CloudFront Distribution
Go to AWS Console → Open CloudFront
Click Create Distribution
Configure:
Origin domain: Select your S3 bucket (do not choose website endpoint)
Viewer protocol policy: Redirect HTTP to HTTPS
Cache policy: Use default
Default root object: index.html
Web Application Firewall (WAF): Do not enable security protections
Click Create Distribution
After a few minutes, it will show the CloudFront domain name (e.g., https://dd2iz5boum8an.cloudfront.net/)




1. Open Your CloudFront URL
You will get this from your CloudFront distribution like:
https://d123456abcdef.cloudfront.net/
This should load your React app hosted via S3+CloudFront.
You should see your Feedback Form.







